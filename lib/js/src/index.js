// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function escaped(s) {
  return s.replace((/;/g), ";;");
}

function stringOfWindowDescriptor(param) {
  switch (param.tag | 0) {
    case /* Title */0 :
        return "TITLE:" + escaped(param[0]);
    case /* ClassName */1 :
        return "CLASS:" + escaped(param[0]);
    case /* RegexpTitle */2 :
        return "REGEXPTITLE:" + escaped(param[0]);
    case /* RegexpClassName */3 :
        return "REGEXPCLASS:" + escaped(param[0]);
    case /* Last */4 :
        if (param[0]) {
          return "LAST";
        } else {
          return ;
        }
    case /* Active */5 :
        if (param[0]) {
          return "ACTIVE";
        } else {
          return ;
        }
    case /* X */6 :
        return "X:" + String(param[0]);
    case /* Y */7 :
        return "Y:" + String(param[0]);
    case /* W */8 :
        return "W:" + String(param[0]);
    case /* H */9 :
        return "H:" + String(param[0]);
    case /* Instance */10 :
        return "INSTANCE:" + String(param[0]);
    
  }
}

function optionMap(f, param) {
  if (param !== undefined) {
    return Caml_option.some(Curry._1(f, Caml_option.valFromOption(param)));
  }
  
}

function filterSome(xs) {
  return xs.filter(Js_option.isSome).map(Js_option.getExn);
}

function splitDescription(windowDescription) {
  return filterSome(/* array */[
              optionMap((function (title) {
                      return /* Title */Block.__(0, [title]);
                    }), Caml_option.nullable_to_opt(windowDescription.title)),
              optionMap((function (className) {
                      return /* ClassName */Block.__(1, [className]);
                    }), Caml_option.nullable_to_opt(windowDescription.className)),
              optionMap((function (regexpTitle) {
                      return /* RegexpTitle */Block.__(2, [regexpTitle]);
                    }), Caml_option.nullable_to_opt(windowDescription.regexpTitle)),
              optionMap((function (regexpClassName) {
                      return /* RegexpClassName */Block.__(3, [regexpClassName]);
                    }), Caml_option.nullable_to_opt(windowDescription.regexpClassName)),
              optionMap((function (last) {
                      return /* Last */Block.__(4, [last]);
                    }), Caml_option.nullable_to_opt(windowDescription.last)),
              optionMap((function (active) {
                      return /* Active */Block.__(5, [active]);
                    }), Caml_option.nullable_to_opt(windowDescription.active)),
              optionMap((function (x) {
                      return /* X */Block.__(6, [x]);
                    }), Caml_option.nullable_to_opt(windowDescription.x)),
              optionMap((function (y) {
                      return /* Y */Block.__(7, [y]);
                    }), Caml_option.nullable_to_opt(windowDescription.y)),
              optionMap((function (w) {
                      return /* W */Block.__(8, [w]);
                    }), Caml_option.nullable_to_opt(windowDescription.w)),
              optionMap((function (h) {
                      return /* H */Block.__(9, [h]);
                    }), Caml_option.nullable_to_opt(windowDescription.h)),
              optionMap((function (instance) {
                      return /* Instance */Block.__(10, [instance]);
                    }), Caml_option.nullable_to_opt(windowDescription.instance))
            ]);
}

function descriptor(windowDescription) {
  var descriptors = splitDescription(windowDescription);
  return "[" + (filterSome(descriptors.map(stringOfWindowDescriptor)).join("; ") + "]");
}

exports.descriptor = descriptor;
/* No side effect */
