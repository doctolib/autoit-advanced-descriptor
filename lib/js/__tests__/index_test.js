// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Index = require("../src/index.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");

function d(title, className, regexpTitle, regexpClassName, text, last, active, x, y, w, h, instance, param) {
  var title$1 = Js_null_undefined.fromOption(title);
  var className$1 = Js_null_undefined.fromOption(className);
  var regexpTitle$1 = Js_null_undefined.fromOption(regexpTitle);
  var regexpClassName$1 = Js_null_undefined.fromOption(regexpClassName);
  var text$1 = Js_null_undefined.fromOption(text);
  var last$1 = Js_null_undefined.fromOption(last);
  var active$1 = Js_null_undefined.fromOption(active);
  var x$1 = Js_null_undefined.fromOption(x);
  var y$1 = Js_null_undefined.fromOption(y);
  var w$1 = Js_null_undefined.fromOption(w);
  var h$1 = Js_null_undefined.fromOption(h);
  var instance$1 = Js_null_undefined.fromOption(instance);
  return Index.descriptorTagged(title$1, className$1, regexpTitle$1, regexpClassName$1, text$1, last$1, active$1, x$1, y$1, w$1, h$1, instance$1);
}

var cases_000 = /* tuple */[
  "[]",
  (function (param) {
      return d(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
    })
];

var cases_001 = /* :: */[
  /* tuple */[
    "[TITLE:toto]",
    (function (param) {
        return d("toto", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
      })
  ],
  /* :: */[
    /* tuple */[
      "[INSTANCE:42]",
      (function (param) {
          return d(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, 42, /* () */0);
        })
    ],
    /* :: */[
      /* tuple */[
        "[X:42; Y:84; W:10; H:20]",
        (function (param) {
            return d(undefined, undefined, undefined, undefined, undefined, undefined, undefined, 42, 84, 10, 20, undefined, /* () */0);
          })
      ],
      /* :: */[
        /* tuple */[
          "[ACTIVE]",
          (function (param) {
              return d(undefined, undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, /* () */0);
            })
        ],
        /* :: */[
          /* tuple */[
            "[]",
            (function (param) {
                return d(undefined, undefined, undefined, undefined, undefined, undefined, false, undefined, undefined, undefined, undefined, undefined, /* () */0);
              })
          ],
          /* :: */[
            /* tuple */[
              "[LAST]",
              (function (param) {
                  return d(undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
                })
            ],
            /* :: */[
              /* tuple */[
                "[]",
                (function (param) {
                    return d(undefined, undefined, undefined, undefined, undefined, false, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
                  })
              ],
              /* :: */[
                /* tuple */[
                  "[TITLE:ta;;ta]",
                  (function (param) {
                      return d("ta;ta", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
                    })
                ],
                /* :: */[
                  /* tuple */[
                    "[TITLE:toto; ACTIVE]",
                    (function (param) {
                        return d("toto", undefined, undefined, undefined, undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, /* () */0);
                      })
                  ],
                  /* :: */[
                    /* tuple */[
                      "[TITLE:toto; CLASS:tata]",
                      (function (param) {
                          return d("toto", "tata", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
                        })
                    ],
                    /* :: */[
                      /* tuple */[
                        "[TITLE:to;;to; CLASS:tata]",
                        (function (param) {
                            return d("to;to", "tata", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
                          })
                      ],
                      /* :: */[
                        /* tuple */[
                          "[TITLE:toto; CLASS:ta;;ta]",
                          (function (param) {
                              return d("toto", "ta;ta", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
                            })
                        ],
                        /* :: */[
                          /* tuple */[
                            "[TITLE:to;;to; CLASS:ta;;ta]",
                            (function (param) {
                                return d("to;to", "ta;ta", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
                              })
                          ],
                          /* :: */[
                            /* tuple */[
                              "[TEXT:text text text]",
                              (function (param) {
                                  return d(undefined, undefined, undefined, undefined, "text text text", undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
                                })
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var cases = /* :: */[
  cases_000,
  cases_001
];

function makeTest(param) {
  var $$case = param[1];
  var expected = param[0];
  return Jest.test(expected, (function (param) {
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(Curry._1($$case, /* () */0)));
              }));
}

Jest.describe("descriptor", (function (param) {
        return List.iter(makeTest, cases);
      }));

exports.d = d;
exports.cases = cases;
exports.makeTest = makeTest;
/*  Not a pure module */
